{"version":3,"sources":["dynamodb/database.js","components/service-rendering/twitter-card.js","components/service-rendering/spotify-card.js","components/infinity-scroll.js","components/footer.js","components/header.js","App.js","reportWebVitals.js","index.js"],"names":["AWS","require","config","region","credentials","CognitoIdentityCredentials","IdentityPoolId","ddb","DynamoDB","DocumentClient","tableName","a","params","TableName","Select","scan","err","data","console","error","JSON","stringify","databaseItemsString","parse","promise","databaseItems","getDatabaseItems","TwitterCard","item","Card","Body","className","Title","style","color","hashtag","tweetId","tweetid","SpotifyCard","playlistName","title","src","url","width","height","frameBorder","allowtransparency","allow","InfinityScroll","state","items","Array","from","length","twitterItems","isLoaded","spotifyItems","fetchMoreData","setTimeout","setState","concat","catch","log","fetchDBItems","this","dataLength","next","hasMore","loader","map","i","index","Items","trending_hashtag","tweet_id","playlist_name","React","Component","Footer","Navbar","bg","variant","fixed","Container","Col","xs","Brand","href","Header","Button","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6f5adbcd.chunk.js","sourcesContent":["// Need aws credentials file in default directory to work\nconst AWS = require('aws-sdk');\n\n// Initialize the Amazon Cognito credentials provider\nAWS.config.region = 'eu-north-1'; // Region\nAWS.config.credentials = new AWS.CognitoIdentityCredentials({\n  IdentityPoolId: 'eu-north-1:fe098a1d-2503-4ea1-9ded-68da1fede9e8',\n  // RoleArn: 'arn:aws:iam::990232125707:role/Cognito_trending_webappUnauth_Role',\n  // AccountId: '990232125707', // your AWS account ID\n});\n\n// AWS.config.update({ region: process.env.REGION });\n\nconst ddb = new AWS.DynamoDB.DocumentClient(); // ({ apiVersion: '2012-08-10' });\n\nasync function getDatabaseItems(tableName) {\n  const params = {\n    TableName: tableName,\n    Select: 'ALL_ATTRIBUTES',\n  };\n\n  const databaseItems = await ddb\n    .scan(params, function (err, data) {\n      if (err) {\n        console.error('Unable to read item. Error JSON:', JSON.stringify(err, null, 2));\n        return '';\n      } else {\n        const databaseItemsString = JSON.stringify(data, null, 2);\n        return JSON.parse(databaseItemsString);\n      }\n    })\n    .promise();\n\n  return databaseItems;\n}\n\nexport default getDatabaseItems;\n","import Card from 'react-bootstrap/Card';\nimport React from 'react';\nimport { Tweet } from 'react-twitter-widgets';\n\nfunction TwitterCard(item) {\n  return (\n    <div>\n      <Card>\n        <Card.Body className=\"d-flex justify-content-center\">\n          <Card.Title style={{ color: 'black' }} className=\"d-flex justify-content-center\"></Card.Title>\n          <ul>\n            <div>Trending right now on Twitter: {item.hashtag} </div>\n            <Tweet tweetId={item.tweetid}></Tweet>\n          </ul>\n        </Card.Body>\n      </Card>\n    </div>\n  );\n}\n\nexport default TwitterCard;\n","import Card from 'react-bootstrap/Card';\nimport React from 'react';\n\nfunction SpotifyCard(item) {\n  return (\n    <Card>\n      <Card.Body className=\"d-flex justify-content-center\">\n        <Card.Title style={{ color: 'black' }} className=\"d-flex justify-content-center\"></Card.Title>\n        <ul>\n          <div>Trending right now on Spotify: {item.playlistName}</div>\n          <iframe\n            title=\"spotify-test\"\n            src={item.url}\n            width=\"300\"\n            height=\"380\"\n            frameBorder=\"0\"\n            allowtransparency=\"true\"\n            allow=\"encrypted-media\"\n          ></iframe>\n        </ul>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default SpotifyCard;\n","import React from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport getDatabaseItems from '../dynamodb/database';\nimport TwitterCard from './service-rendering/twitter-card';\nimport SpotifyCard from './service-rendering/spotify-card';\n\nclass InfinityScroll extends React.Component {\n  state = {\n    items: Array.from({ length: 20 }),\n    twitterItems: null,\n    isLoaded: false,\n    spotifyItems: null,\n  };\n\n  fetchMoreData = () => {\n    // a fake async api call like which sends\n    // 20 more records in 1.5 secs\n    setTimeout(() => {\n      this.setState({\n        items: this.state.items.concat(Array.from({ length: 20 })),\n      });\n    }, 1500);\n  };\n\n  componentDidMount() {\n    const fetchDBItems = async () => {\n      const spotifyItems = await getDatabaseItems('spotify').catch((error) => console.log(error));\n      const twitterItems = await getDatabaseItems('twitter').catch((error) => console.log(error));\n      this.setState({\n        twitterItems: twitterItems,\n        spotifyItems: spotifyItems,\n      });\n      console.log('db items in state', twitterItems);\n    };\n    fetchDBItems().catch((error) => {\n      console.log(error);\n    });\n  }\n\n  render() {\n    if (this.state.twitterItems && this.state.spotifyItems) {\n      return (\n        <div>\n          {console.log(this.state.spotifyItems, 'spot')}\n          <h1>Trending is coming</h1>\n          <hr />\n          <InfiniteScroll\n            dataLength={this.state.items.length}\n            next={this.fetchMoreData}\n            hasMore={true}\n            loader={<h4>Loading...</h4>}\n          >\n            {this.state.items.map((i, index) => (\n              <div key={index}>\n                {console.log(index)}\n                <TwitterCard\n                  key={index + 100}\n                  hashtag={this.state.twitterItems.Items[index].trending_hashtag}\n                  tweetid={this.state.twitterItems.Items[index].tweet_id}\n                ></TwitterCard>\n                <SpotifyCard\n                  key={index + 200}\n                  url={this.state.spotifyItems.Items[index].url}\n                  playlistName={this.state.spotifyItems.Items[index].playlist_name}\n                ></SpotifyCard>\n              </div>\n            ))}\n          </InfiniteScroll>\n        </div>\n      );\n    } else {\n      return <div>Loading!</div>;\n    }\n  }\n}\n\nexport default InfinityScroll;\n","import React from 'react';\nimport { Container, Col, Navbar, Button } from 'react-bootstrap';\n\nfunction Footer() {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" fixed=\"bottom\" className=\"d-flex justify-content-center\">\n      <Container>\n        <Col xs={12}>{/* <Button variant=\"outline-info\">Go Top</Button> */}</Col>\n        <Col>\n          <Navbar.Brand href=\"#home\">Incli</Navbar.Brand>\n        </Col>\n      </Container>\n    </Navbar>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\nimport { Container, Col, Navbar, Button } from 'react-bootstrap';\nfunction Header() {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" fixed=\"top\" className=\"d-flex justify-content-center\">\n      <Container>\n        <Col xs={12}>\n          <Button variant=\"outline-info\">Go Top</Button>\n        </Col>\n        <Col>\n          <Navbar.Brand href=\"#home\">Incli</Navbar.Brand>\n        </Col>\n      </Container>\n    </Navbar>\n  );\n}\n\nexport default Header;\n","import React, { useState } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport InfinityScroll from './components/infinity-scroll';\nimport Footer from './components/footer';\nimport Header from './components/header';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <InfinityScroll />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}